// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/rmntim/movielab/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MovieSearcher is an autogenerated mock type for the MovieSearcher type
type MovieSearcher struct {
	mock.Mock
}

// SearchMovies provides a mock function with given fields: title, actorName, limit, offset
func (_m *MovieSearcher) SearchMovies(title string, actorName string, limit int, offset int) ([]entity.Movie, error) {
	ret := _m.Called(title, actorName, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchMovies")
	}

	var r0 []entity.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]entity.Movie, error)); ok {
		return rf(title, actorName, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []entity.Movie); ok {
		r0 = rf(title, actorName, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(title, actorName, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieSearcher creates a new instance of MovieSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieSearcher {
	mock := &MovieSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
