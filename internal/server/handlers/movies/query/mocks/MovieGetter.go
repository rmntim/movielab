// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/rmntim/movielab/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MovieGetter is an autogenerated mock type for the MovieGetter type
type MovieGetter struct {
	mock.Mock
}

// GetMovies provides a mock function with given fields: limit, offset, orderBy, asc
func (_m *MovieGetter) GetMovies(limit int, offset int, orderBy string, asc bool) ([]entity.Movie, error) {
	ret := _m.Called(limit, offset, orderBy, asc)

	if len(ret) == 0 {
		panic("no return value specified for GetMovies")
	}

	var r0 []entity.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, bool) ([]entity.Movie, error)); ok {
		return rf(limit, offset, orderBy, asc)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, bool) []entity.Movie); ok {
		r0 = rf(limit, offset, orderBy, asc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, bool) error); ok {
		r1 = rf(limit, offset, orderBy, asc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieGetter creates a new instance of MovieGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieGetter {
	mock := &MovieGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
