// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/rmntim/movielab/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ActorCreator is an autogenerated mock type for the ActorCreator type
type ActorCreator struct {
	mock.Mock
}

// CreateActor provides a mock function with given fields: actor
func (_m *ActorCreator) CreateActor(actor *entity.NewActor) (int, error) {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for CreateActor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.NewActor) (int, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(*entity.NewActor) int); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*entity.NewActor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActorCreator creates a new instance of ActorCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorCreator {
	mock := &ActorCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
